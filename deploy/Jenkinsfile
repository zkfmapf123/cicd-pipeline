pipeline{
    agent any

    options {
        parallelsAlwaysFailFast()
    }

    parameters {
        string(name: "DEPLOY_PATH", defaultValue: "deploy", description : "path to deploy")
        string(name: "AWS_ACCOUNT_ID", defaultValue: "182024812696", description : "aws account id")
        string(name: "DOCKER_IMAGE_NAME", defaultValue: "demo", description : "docker image name")
        string(name: "DOCKER_TAG", defaultValue : "1.0.0", description: "docker tag")   
    }

    environment {
        REGION = "ap-northeast-2"
        ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/ecr_practice"

        DOCKER_IMAGE = "${ECR_REPOSITORY}:${params.DOCKER_IMAGE_NAME}_${params.DOCKER_TAG}"
        DOCKER_TEST_IMAGE = "${ECR_REPOSITORY}:_test_${params.DOCKER_TAG}"
    }

    stages {

        stage ("Docker Images") {
            steps {
                sh "docker images"
            }
        }

        stage ("Docker Container") {
            steps {
                sh "docker ps -a"
            }
        }

        stage ("Build Docker Image") {
            steps {
                sh "docker build -f ${params.DEPLOY_PATH}/Dockerfile.test -t ${DOCKER_TEST_IMAGE} ."
            }
            
            post {
                success {
                    echo "Success Build"
                }

                failure {
                    echo "Fail Build"
                }
            }
        }

        stage("CI test") {
        
            steps {
                sh "docker run --rm ${DOCKER_TEST_IMAGE}"
            }

            post {
                success {
                    echo "CI Test Success"
                }

                failure {
                    echo "CI Test Failure"
                }
            }
        }

        stage("Docker Build"){
            steps {
                sh "docker build -f ${params.DEPLOY_PATH}/Dockerfile -t ${DOCKER_IMAGE} ."
            }
        }

        /**
            AWS PipeLine Step (plugin)
            AWS Configuration Globla (plugin)
            AWS ECR (plugin)
         */
        stage("Push ECR") {
            steps {
                script {
                    docker.withRegistry("https://${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com", "ecr:ap-northeast-2:aws-cred") {
                        docker.image("${DOCKER_IMAGE}").push()
                        docker.image("${DOCKER_TEST_IMAGE}").push()
                    }
                }
            }
        }
    }

    post {
        success{
            echo "success"
        }

        failure{
            echo "failure"
        }

        cleanup {
            sh("docker image prune -a -f")
            sh("docker container prune -f")
        }
    }
}